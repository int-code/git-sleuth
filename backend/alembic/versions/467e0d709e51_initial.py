"""initial

Revision ID: 467e0d709e51
Revises: 
Create Date: 2025-08-03 09:53:25.371941

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '467e0d709e51'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_task_id'), table_name='task')
    op.drop_table('task')
    op.drop_index(op.f('ix_merge_conflicts_id'), table_name='merge_conflicts')
    op.drop_table('merge_conflicts')
    op.drop_index(op.f('ix_pr_id'), table_name='pr')
    op.drop_table('pr')
    op.drop_index(op.f('ix_repositories_id'), table_name='repositories')
    op.drop_table('repositories')
    op.drop_index(op.f('ix_resolved_code_id'), table_name='resolved_code')
    op.drop_table('resolved_code')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('resolved_code',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('merge_conflict_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('resolved_code_branch', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('resolved_code_pkey'))
    )
    op.create_index(op.f('ix_resolved_code_id'), 'resolved_code', ['id'], unique=False)
    op.create_table('repositories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('installation_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('github_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('private', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('repositories_pkey')),
    sa.UniqueConstraint('github_id', name=op.f('repositories_github_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('node_id', name=op.f('repositories_node_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_repositories_id'), 'repositories', ['id'], unique=False)
    op.create_table('pr',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('repo_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pr_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('installation_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('github_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('merged_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('mergeable', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('commits', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('details', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pr_pkey')),
    sa.UniqueConstraint('github_id', name=op.f('pr_github_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('node_id', name=op.f('pr_node_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_pr_id'), 'pr', ['id'], unique=False)
    op.create_table('merge_conflicts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('pr_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('merge_conflicts_pkey'))
    )
    op.create_index(op.f('ix_merge_conflicts_id'), 'merge_conflicts', ['id'], unique=False)
    op.create_table('task',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('pr_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('task_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('merge_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('celery_task_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('task_pkey'))
    )
    op.create_index(op.f('ix_task_id'), 'task', ['id'], unique=False)
    # ### end Alembic commands ###
